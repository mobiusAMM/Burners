/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { OpenMath, OpenMathInterface } from "../OpenMath";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "exchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "exchange",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x61018461003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063ed7248041461003a575b600080fd5b61004d610048366004610089565b610063565b60405161005a91906100aa565b60405180910390f35b600082610078670de0b6b3a7640000846100ec565b61008291906100b3565b9392505050565b6000806040838503121561009b578182fd5b50508035926020909101359150565b90815260200190565b6000826100e7577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610149577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50029056fea264697066735822122016d2ae9f0e88c4a31184deb4d9d15f512d60dd69997621954743749d46832c1a64736f6c63430008000033";

type OpenMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OpenMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OpenMath__factory extends ContractFactory {
  constructor(...args: OpenMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "OpenMath";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OpenMath> {
    return super.deploy(overrides || {}) as Promise<OpenMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OpenMath {
    return super.attach(address) as OpenMath;
  }
  connect(signer: Signer): OpenMath__factory {
    return super.connect(signer) as OpenMath__factory;
  }
  static readonly contractName: "OpenMath";
  public readonly contractName: "OpenMath";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OpenMathInterface {
    return new utils.Interface(_abi) as OpenMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OpenMath {
    return new Contract(address, _abi, signerOrProvider) as OpenMath;
  }
}
